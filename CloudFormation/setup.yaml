AWSTemplateFormatVersion: '2010-09-09'
Description: Setup for Distributed Blockchain Experiment with Requestor and Responder Lambda Functions

Resources:

############################
  ##########################
  ##   Lambda Functions 3 ##
  ##########################
  ResponderFunction3:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: main
      Runtime: provided.al2023
      Role: !GetAtt ResponderLambdaExecutionRole.Arn
      Code:
        S3Bucket: thesisubc
        S3Key: responder.zip
      Environment:
        Variables:
          DDB_TABLE_NAME: droplets
          BLOCKCHAIN_S3_BUCKET: thesisubc
          RESPONDER_ID: 3
          SETUP_DB: setup
      MemorySize: 3006
      Timeout: 900
          

  ###################
  ##   SNS Topic 3 ##
  ###################
  Responder3:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Responder3
      TopicName: Responder3Topic
  
  ###########################
  ##   SNS Subscriptions 3 ##
  ###########################

  Responder3SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref Responder3
      Endpoint: !GetAtt ResponderFunction3.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ResponderFunction3.Arn
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref Responder3
############################




############################
  ##########################
  ##   Lambda Functions 4 ##
  ##########################
  ResponderFunction4:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: main
      Runtime: provided.al2023
      Role: !GetAtt ResponderLambdaExecutionRole.Arn
      Code:
        S3Bucket: thesisubc
        S3Key: responder.zip
      Environment:
        Variables:
          DDB_TABLE_NAME: droplets
          BLOCKCHAIN_S3_BUCKET: thesisubc
          RESPONDER_ID: 4
          SETUP_DB: setup
      MemorySize: 3006
      Timeout: 900

  ###################
  ##   SNS Topic 4 ##
  ###################
  Responder4:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Responder4
      TopicName: Responder4Topic

  ###########################
  ##   SNS Subscriptions 4 ##
  ###########################

  Responder4SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref Responder4
      Endpoint: !GetAtt ResponderFunction4.Arn

  LambdaInvokePermission4:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ResponderFunction4.Arn
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref Responder4
############################


############################
  ##########################
  ##   Lambda Functions 5 ##
  ##########################
  ResponderFunction5:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: main
      Runtime: provided.al2023
      Role: !GetAtt ResponderLambdaExecutionRole.Arn
      Code:
        S3Bucket: thesisubc
        S3Key: responder.zip
      Environment:
        Variables:
          DDB_TABLE_NAME: droplets
          BLOCKCHAIN_S3_BUCKET: thesisubc
          RESPONDER_ID: 5
          SETUP_DB: setup
      MemorySize: 3006
      Timeout: 900

  ###################
  ##   SNS Topic 5 ##
  ###################
  Responder5:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Responder5
      TopicName: Responder5Topic

  ###########################
  ##   SNS Subscriptions 5 ##
  ###########################

  Responder5SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref Responder5
      Endpoint: !GetAtt ResponderFunction5.Arn

  LambdaInvokePermission5:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ResponderFunction5.Arn
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref Responder5
############################



### POLICIES

  ResponderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AdministratorAccess"
